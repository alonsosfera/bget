// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  accounts      Account[]
  userAccounts  UserAccount[]
  sessions      Session[]
}

model UserAccount {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Account {
  id                    String                 @id @default(uuid())
  name                  String
  transactions          TransactionEntry[]
  recurringTransactions RecurrentTransaction[]
  balances              Balance[]
  type                  AccountType
  user                  User                   @relation(fields: [userId], references: [id])
  userId                String
  creditCardOptions     CreditCardOptions?
}

model CreditCardOptions {
  id          String   @id @default(uuid())
  paymentDate DateTime
  closingDay  DateTime
  paid        Boolean
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   String   @unique
}

model Transaction {
  id                   String                @id @default(uuid())
  description          String
  amount               Decimal
  category             Category?             @relation(fields: [categoryId], references: [id])
  categoryId           String?
  createdAt            DateTime
  type                 TransactionType
  transactionEntry     TransactionEntry?
  recurrentTransaction RecurrentTransaction?
}

model TransactionEntry {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
  Account       Account?    @relation(fields: [accountId], references: [id])
  accountId     String?
}

model RecurrentTransaction {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
  Account       Account?    @relation(fields: [accountId], references: [id])
  accountId     String?
}

model Balance {
  id        String   @id @default(uuid())
  amount    Decimal
  account   Account  @relation(fields: [accountId], references: [id])
  accountId String
  createdAt DateTime
}

model Category {
  id          String        @id @default(uuid())
  name        String
  transaction Transaction[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AccountType {
  CREDIT_CARD
  SAVINGS
}

enum TransactionType {
  INCOME
  EXPENSE
  PAYMENT
}
